comment "#" ;
comment "//" ;
comment "/*" "*/" ;

PDefs. Program ::= [Def] ;

terminator  Def "" ;
DPpro.      Def ::= TDir ;
DKPpro.     Def ::= [KWord] TDir;
DFun.       Def ::= Func ;
DKFun.      Def ::= [KWord] Func ;
DStruct.    Def ::= Strct ;
DKStruct.   Def ::= [KWord] Strct ;

-- Directivas de alto nivel
TDDir.  TDir  ::= Type [Id] ";" ;
TDDir1. TDir  ::= Type "&" Id ";" ;
TDDir2. TDir  ::= Type "[" "]" Id  ";" ;
TDDir3. TDir  ::= Type Id "[" "]" ";" ;
TDDir4. TDir  ::= Type ";" ;
TDDir5. TDir  ::= Type "&" Id "=" Exp ";" ;
TDDir6. TDir  ::= Type Id "=" Exp ";" ;

-- Funciones
FFunc.  Func  ::= Type Id "(" [Arg] ")" ";" ;
FFunc1. Func  ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;


-- Argumentos de funciones
separator Arg "," ;
Test.  Arg ::= AIni;
Test1. Arg ::= [KWord] AIni;

-- Inicialización de argumentos
AAIni.      AIni    ::= Type ;
AAIni1.     AIni    ::= Type Id ;
AAIni2.     AIni    ::= Type "&" Id ;
AAIni3.     AIni    ::= Type "[" "]" Id ;
AAIni4.     AIni    ::= Type "&" "[" "]" Id ;
AAIni5.     AIni    ::= Type "&" ;
AAIni6.     AIni    ::= Type Id "=" Exp;
AAIni7.     AIni    ::= Type "&" Id "=" Exp;

-- Sentencias
terminator   Stm "" ;
SStr.        Stm2 ::= Strct;
SInit.       Stm2 ::= SIni ;
SKInit.      Stm2 ::= [KWord] SIni ;
SEmpt.       Stm1 ::= ";" ;
SExp.        Stm1 ::= Exp ";" ;
SBlock.      Stm1 ::= "{" [Stm] "}" ;
SIfElse.     Stm1 ::= "if" "(" Exp ")" Stm "else" Stm ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SDoWhile.    Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor.        Stm ::= "for" "(" Fini ";" Exp ";" Exp ")" Stm ;
coercions Stm 2 ;


-- Estructuras
SStrct.  Strct1 ::= "struct" Id "{" [SIni] "}" [Id] ";" ;
SStrct2. Strct  ::= "struct" Id "{" [SIni] "}" ";" ;
coercions Strct 1;

-- Inicialización de sentencias
terminator SIni "" ;
SSIni.      SIni ::= Type Id "[" Exp "]" ";" ;
SSIni1.     SIni ::= Type Id "=" Exp ";" ;
SSIni2.     SIni ::= Type "&" Id "=" Exp ";" ;
SSIni3.     SIni ::= Type "&" Id ";" ;
SSIni4.     SIni ::= Type [Id] ";" ;


FFini.     Fini ::= Type Id "=" Exp ;
FFini1.    Fini ::= Id "=" Exp ;
FFini2.    Fini ::= Type Id ;


-- Expresiones
separator Exp "," ;
ETrue.    Exp16  ::= "true" ;
EFalse.   Exp16  ::= "false" ;
EInt.     Exp16  ::= Integer ;
EChar.    Exp16  ::= Char ;
EDouble.  Exp16  ::= Double ;
EString.  Exp16  ::= [Str] ;
EQual.    Exp15  ::= Qua ;
EId.      Exp15  ::= Id ;
EIdx.     Exp15  ::= Id "[" Exp "]" ;
ECall.    Exp15  ::= Id "(" [Exp] ")" ;
EAProj.   Exp14 ::=  Exp14 "->" Exp15;
EProj.    Exp14  ::= Exp14 "." Exp15;
EDerf.    Exp14  ::= "*" Exp15 ;
EPIncr.   Exp14  ::= Exp15 "++" ;
EPDecr.   Exp14  ::= Exp15 "--" ;
EIncr.    Exp13  ::= "++" Exp14 ;
EDecr.    Exp13  ::= "--" Exp14 ;
ENeg.     Exp13  ::= "!" Exp14 ;
ETimes.   Exp12  ::= Exp12 "*"  Exp13 ;
EMod.     Exp12  ::= Exp12 "%"  Exp13 ;
EDiv.     Exp12  ::= Exp12 "/"  Exp13 ;
EPlus.    Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.   Exp11  ::= Exp11 "-"  Exp12 ;
ELShif.   Exp10  ::= Exp10 "<<" Exp11 ;
ERShif.   Exp10  ::= Exp10 ">>" Exp11 ;
ELt.      Exp9   ::= Exp9  "<"  Exp10 ;
EGt.      Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.    Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.    Exp9   ::= Exp9  ">=" Exp10 ;
EEq.      Exp8   ::= Exp8  "==" Exp9 ;
ENEq.     Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.     Exp4   ::= Exp4  "&&" Exp5 ;
EOr.      Exp3   ::= Exp3  "||" Exp4 ;
EAss.     Exp2   ::= Exp2 "=" Exp3 ;
EMAss.    Exp2   ::= Exp2 "-=" Exp3 ;
EPAss.    Exp2   ::= Exp2 "+=" Exp3 ;
ECond.    Exp2   ::= Exp2 "?" Exp3 ":" Exp3 ;
EThrow.   Exp1   ::= "throw" Exp2 ;

coercions Exp 16 ;

separator nonempty Str "" ;
Strlst. Str ::= String;

-- Tipos generales
TType.   Type ::= IType ;
TQua.    Type ::= Qua ;

-- Palabras calificadas
separator nonempty Qua "," ;
QQua.    Qua ::= IType "::" IType ;
QQuaLst. Qua ::= IType "::" Qua ;

separator nonempty IType "," ;
IChar.      IType ::= "char" ;
IVoid.      IType ::= "void" ;
IBool.      IType ::= "bool" ;
IDouble.    IType ::= "double" ;
IInt.       IType ::= "int" ;
IString.    IType ::= "string" ;
ITemp.      IType ::= Id "<" [Qua] ">" ;
ITemp2.     IType ::= Id "<" [IType] ">" ;
IId.        IType ::= Id;

-- Palabras reservadas
separator  nonempty  KWord " " ;
KWTdef.      KWord ::= "typedef" ;
KWCons.      KWord ::= "const" ;
KWUsing.     KWord ::= "using" ;
KWInline.    KWord ::= "inline" ;

separator nonempty Id "," ;
token Id (letter (letter | digit | '_')*) ;