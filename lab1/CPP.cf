comment "#" ;
comment "//" ;
comment "/*" "*/" ;

PDefs.   Program ::= [Def] ;



terminator  Def "" ;
DUsing.     Def    ::= "using" [Qua] ";" ;
DFun.       Def    ::= Type Id "(" [Arg] ")" ";" ;
DBFun.      Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DTdef.      Def ::= TDef;

separator   Arg "," ;
ADecl.      Arg    ::= Type Id ;
ADecl1.     Arg    ::= Type "&" Id ;
ADecl4.     Arg    ::= Type "&" ;
ADecl2.     Arg    ::= "const" Type "&" Id ;
ADecl3.     Arg    ::= "const" Type Id ;
ADecl5.     Arg    ::= "const" Type "&";


terminator   Stm "" ;
SEmpt.       Stm1 ::= ";" ;
SExp.        Stm1 ::= Exp ";" ;
SQua.        Stm1 ::= Type [Id] ";" ;
SInit.       Stm1 ::= Type Id "=" Exp ";" ;
SReturn.     Stm1 ::= "return" Exp ";" ;
SReturnVoid. Stm1 ::= "return" ";" ;
SWhile.      Stm1 ::= "while" "(" Exp ")" Stm1 ;
SBlock.      Stm1 ::= "{" [Stm] "}" ;
SIfElse.     Stm1 ::= "if" "(" Exp ")" Stm1 "else" Stm1 ;
SIf.         Stm ::= "if" "(" Exp ")" Stm1 ;ma
STyped.      Stm1 ::= TDef ;
coercions Stm 1 ;

TTDef. TDef ::= "typedef" Type Id ";" ;

separator Exp "," ;
ETrue.    Exp16  ::= "true" ;
EFalse.   Exp16  ::= "false" ;
EInt.     Exp16  ::= Integer ;
EChar.    Exp16  ::= Char ;
EDouble.  Exp16  ::= Double ;
EString.  Exp16  ::= [Str] ;
EIdx.     Exp15  ::= Id "[" Exp "]" ;
EQual.    Exp15  ::= Type ; -- Esto no es convincente.
ECall.    Exp15  ::= Id "(" [Exp] ")" ;
EAProj.   Exp14 ::=  Exp14 "->" Exp15;
EProj.    Exp14  ::= Exp14 "." Exp15;
EDerf.    Exp14  ::= "*" Exp15 ;
EPIncr.   Exp14  ::= Exp15 "++" ;
EPDecr.   Exp14  ::= Exp15 "--" ;
EIncr.    Exp13  ::= "++" Exp14 ;
EDecr.    Exp13  ::= "--" Exp14 ;
ENeg.     Exp13  ::= "!" Exp14 ;
ETimes.   Exp12  ::= Exp12 "*"  Exp13 ;
EMod.     Exp12  ::= Exp12 "%"  Exp13 ;
EDiv.     Exp12  ::= Exp12 "/"  Exp13 ;
EPlus.    Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.   Exp11  ::= Exp11 "-"  Exp12 ;
ELShif.   Exp10  ::= Exp10 "<<" Exp11 ;
ERShif.   Exp10  ::= Exp10 ">>" Exp11 ;
ELt.      Exp9   ::= Exp9  "<"  Exp10 ;
EGt.      Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.    Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.    Exp9   ::= Exp9  ">=" Exp10 ;
EEq.      Exp8   ::= Exp8  "==" Exp9 ;
ENEq.     Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.     Exp4   ::= Exp4  "&&" Exp5 ;
EOr.      Exp3   ::= Exp3  "||" Exp4 ;
EAss.     Exp2   ::= Exp2 "=" Exp3 ;
ECond.    Exp2   ::= Exp2 "?" Exp3 ":" Exp3 ;
EThrow.   Exp1   ::= "throw" Exp2 ;

coercions Exp 16 ;

separator nonempty Str "" ;
Strlst. Str ::= String;

DTempl. Templ ::= Id "<" [Type] ">" ;

separator nonempty Type "," ;
TType.      Type ::= [Qua] ;

separator nonempty Qua "::"; 
QTemp.      Qua ::= Templ ;
QId.        Qua ::= Id ;
TBool.      Qua ::= "bool" ;
TDouble.    Qua ::= "double" ;
TInt.       Qua ::= "int" ;
TString.    Qua ::= "string" ;
TVoid.      Qua ::= "void" ;

separator nonempty Id "," ;
token Id (letter (letter | digit | '_')*) ;
